{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace_nextjs\\\\myblog-bynextjs\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Container from \"../components/container\";\nimport ArticleList from \"../components/article-list\";\nimport Intro from \"../components/intro\";\nimport Layout from \"../components/layout\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../lib/constants\";\nimport useSWR from \"swr\";\n\n//const Index: React.FC = ({}) => {\nconst Index = ({\n  allPosts\n}) => {\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\"; // API呼び出しの準備\n\n  const fetcher = () => fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\"\n    }\n  }).then(res => res.json()); // SWRを使用してのAPI呼び出し\n\n\n  const {\n    data,\n    error\n  } = useSWR(cmsurl, fetcher);\n  /*\n  const fetcher = (\n    url : string\n  ) => fetch(\"https://api.github.com/users/facebook/repos\").then(res => res.json());\n  const {data, error} = useSWR(\"https://api.github.com/users/facebook/repos\", fetcher)\n  */\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, \"error\");\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 21\n    }\n  }, \"loading...\");\n  const articleList = data.contents.reverse();\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, \"Next.js Blog Example with \", CMS_NAME)), __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(Intro, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }), __jsx(\"h2\", {\n    className: \"mb-8 text-6xl md:text-7xl font-bold tracking-tighter leading-tight\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Article List\"), articleList.length > 0 && __jsx(ArticleList, {\n    posts: articleList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 38\n    }\n  }))));\n};\n\nexport default Index;\nexport async function getStaticProps() {\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n  const res = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\"\n    }\n  });\n  const posts = await res.json();\n  const articleList = posts.contents.reverse();\n  const paths = articleList.map(article => `/posts/${article.id.toString}`);\n  return {\n    props: {\n      allPosts\n    }\n  };\n}\n/*\nexport const getStaticProps = async () => {\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"coverImage\",\n    \"excerpt\",\n  ]);\n\n  return {\n    props: { allPosts },\n  };\n};\n*/","map":{"version":3,"sources":["D:/workspace_nextjs/myblog-bynextjs/pages/index.tsx"],"names":["React","Container","ArticleList","Intro","Layout","Head","CMS_NAME","useSWR","Index","allPosts","cmsurl","fetcher","fetch","method","headers","then","res","json","data","error","articleList","contents","reverse","length","getStaticProps","posts","paths","map","article","id","toString","props"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,MAAP,MAAmB,KAAnB;;AAOA;AACA,MAAMC,KAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C,QAAMC,MAAM,GAAG,+CAAf,CAD+C,CAG/C;;AACA,QAAMC,OAAO,GAAG,MACdC,KAAK,CAACF,MAAD,EAAS;AACZG,IAAAA,MAAM,EAAE,KADI;AAEZC,IAAAA,OAAO,EAAE;AACP,mBAAa;AADN;AAFG,GAAT,CAAL,CAKGC,IALH,CAKSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EALjB,CADF,CAJ+C,CAY/C;;;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBZ,MAAM,CAAUG,MAAV,EAAkBC,OAAlB,CAA9B;AAEA;;;;;;;AAMA,MAAIQ,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,QAAME,WAAW,GAAGF,IAAI,CAACG,QAAL,CAAcC,OAAd,EAApB;AAEA,SACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAkChB,QAAlC,CADF,CADF,EAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAI,IAAA,SAAS,EAAC,oEAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAKGc,WAAW,CAACG,MAAZ,GAAqB,CAArB,IAA0B,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEH,WAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAL7B,CAJF,CADF,CADF;AAgBD,CA1CD;;AA4CA,eAAeZ,KAAf;AAEA,OAAO,eAAegB,cAAf,GAAgC;AACrC,QAAMd,MAAM,GAAG,+CAAf;AAEA,QAAMM,GAAG,GAAG,MAAMJ,KAAK,CAACF,MAAD,EAAS;AAC9BG,IAAAA,MAAM,EAAE,KADsB;AAE9BC,IAAAA,OAAO,EAAE;AACP,mBAAa;AADN;AAFqB,GAAT,CAAvB;AAMA,QAAMW,KAAK,GAAG,MAAMT,GAAG,CAACC,IAAJ,EAApB;AAEA,QAAMG,WAAW,GAAGK,KAAK,CAACJ,QAAN,CAAeC,OAAf,EAApB;AAEA,QAAMI,KAAK,GAAGN,WAAW,CAACO,GAAZ,CACXC,OAAD,IAAwB,UAASA,OAAO,CAACC,EAAR,CAAWC,QAAS,EADzC,CAAd;AAIA,SAAO;AACLC,IAAAA,KAAK,EAAE;AAAEtB,MAAAA;AAAF;AADF,GAAP;AAGD;AAED","sourcesContent":["import React from \"react\";\nimport Container from \"../components/container\";\nimport ArticleList from \"../components/article-list\";\nimport HeroPost from \"../components/hero-post\";\nimport Intro from \"../components/intro\";\nimport Layout from \"../components/layout\";\nimport { getAllPosts } from \"../lib/api\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../lib/constants\";\nimport Post from \"../types/post\";\nimport useSWR from \"swr\";\nimport CMS from \"../types/cms\";\n\ntype Props = {\n  allPosts: Post[];\n};\n\n//const Index: React.FC = ({}) => {\nconst Index: React.FC<Props> = ({ allPosts }) => {\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  // API呼び出しの準備\n  const fetcher = () =>\n    fetch(cmsurl, {\n      method: \"GET\",\n      headers: {\n        \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n      },\n    }).then((res) => res.json());\n\n  // SWRを使用してのAPI呼び出し\n  const { data, error } = useSWR<CMS, {}>(cmsurl, fetcher);\n\n  /*\n  const fetcher = (\n    url : string\n  ) => fetch(\"https://api.github.com/users/facebook/repos\").then(res => res.json());\n  const {data, error} = useSWR(\"https://api.github.com/users/facebook/repos\", fetcher)\n*/\n  if (error) return <div>error</div>;\n  if (!data) return <div>loading...</div>;\n\n  const articleList = data.contents.reverse();\n\n  return (\n    <>\n      <Layout>\n        <Head>\n          <title>Next.js Blog Example with {CMS_NAME}</title>\n        </Head>\n        <Container>\n          <Intro />\n          <h2 className=\"mb-8 text-6xl md:text-7xl font-bold tracking-tighter leading-tight\">\n            Article List\n          </h2>\n          {articleList.length > 0 && <ArticleList posts={articleList} />}\n        </Container>\n      </Layout>\n    </>\n  );\n};\n\nexport default Index;\n\nexport async function getStaticProps() {\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  const res = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  });\n  const posts = await res.json();\n\n  const articleList = posts.contents.reverse();\n\n  const paths = articleList.map(\n    (article: PostType) => `/posts/${article.id.toString}`\n  );\n\n  return {\n    props: { allPosts },\n  };\n}\n\n/*\nexport const getStaticProps = async () => {\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"coverImage\",\n    \"excerpt\",\n  ]);\n\n  return {\n    props: { allPosts },\n  };\n};\n*/\n"]},"metadata":{},"sourceType":"module"}