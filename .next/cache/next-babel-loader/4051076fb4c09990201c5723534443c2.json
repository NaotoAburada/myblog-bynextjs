{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\workspace_nextjs\\\\myblog-bynextjs\\\\pages\\\\posts\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Container from \"../../components/container\";\nimport PostBody from \"../../components/post-body\";\nimport Header from \"../../components/header\";\nimport PostHeader from \"../../components/post-header\";\nimport Layout from \"../../components/layout\";\nimport Head from \"next/head\";\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var post = _ref.post,\n      morePosts = _ref.morePosts,\n      preview = _ref.preview;\n  //const Post: NextPage<Props> = ({ post, morePosts, preview }) => {\n  var router = useRouter();\n\n  if (!router.isFallback && !(post === null || post === void 0 ? void 0 : post.slug)) {\n    return __jsx(ErrorPage, {\n      statusCode: 404,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 12\n      }\n    });\n  }\n  /*\n  let linkpostpre = -1;\n  let linkpostback = morePosts.length;\n  for (let i = 0; i < morePosts.length; i++) {\n    if (post?.slug === morePosts[i].slug) {\n      if (i !== 0) {\n        linkpostpre = i - 1;\n      }\n      linkpostback = i + 1;\n    }\n  }\n   {router.isFallback ? (\n          <PostTitle>Loading…</PostTitle>\n        ) : (\n        )}\n  */\n\n\n  return __jsx(Layout, {\n    preview: preview,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), __jsx(React.Fragment, null, __jsx(\"article\", {\n    className: \"mb-32\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, post.title)), __jsx(PostHeader, {\n    title: post.title,\n    date: post.date,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }), __jsx(PostBody, {\n    content: post.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  })))));\n};\n/*\n              <div className=\"flex\">\n                {linkpostpre === -1 ? (\n                  <PreviousArticle\n                    post={morePosts[linkpostpre]}\n                    linknumber={linkpostpre}\n                  />\n                ) : (\n                  <PreviousArticle post={morePosts[linkpostpre]} />\n                )}\n                {linkpostback === morePosts.length ? (\n                  <BackArticle post={morePosts[linkpostpre]} linknumber={0} />\n                ) : (\n                  <BackArticle post={morePosts[linkpostback]} />\n                )}\n              </div>\n*/\n\n\n_s(Post, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\nexport var __N_SSG = true;\nexport default Post;\n/*\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  const fetcher = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  }).then((res) => res.json());\n\n  // SWRを使用してのAPI呼び出し\n  const { data, error } = useSWR<CMS, {}>(cmsurl, fetcher);\n\n  if (error) return <div>error</div>;\n  if (!data) return <div>loading...</div>;\n\n  const articleList = data.contents.reverse();\n  const post = articleList[0];\n  const allPosts = articleList.slice(1);\n\n  const content = await markdownToHtml(post.blogtext || \"\");\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n*/\n\n/*\n  return {\n    props: {\n      post: params.post,\n      morePosts: params.morePosts,\n    },\n  };\n\n  const post = getPostBySlug(params.slug, [\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"content\",\n    \"ogImage\",\n    \"coverImage\",\n  ]);\n\n  const content = await markdownToHtml(post.content || \"\");\n\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"coverImage\",\n    \"excerpt\",\n  ]);\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n*/\n\n/*\n  const res = await fetch(\"/posts\");\n  const posts = await res.json();\n\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n\nconst posts = getAllPosts([\"slug\"]);\n\nreturn {\n  paths: articleList.map((articleList) => {\n    return {\n      params: {\n        slug: articleList.id,\n      },\n    };\n  }),\n  fallback: false,\n};\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["D:/workspace_nextjs/myblog-bynextjs/pages/posts/[id].tsx"],"names":["React","useRouter","ErrorPage","Container","PostBody","Header","PostHeader","Layout","Head","Post","post","morePosts","preview","router","isFallback","slug","title","date","content"],"mappings":";;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AAGA,OAAOC,MAAP,MAAmB,yBAAnB;AAGA,OAAOC,IAAP,MAAiB,WAAjB;;AAaA,IAAMC,IAAqB,GAAG,SAAxBA,IAAwB,OAAkC;AAAA;;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC9D;AACA,MAAMC,MAAM,GAAGZ,SAAS,EAAxB;;AAEA,MAAI,CAACY,MAAM,CAACC,UAAR,IAAsB,EAACJ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEK,IAAP,CAA1B,EAAuC;AACrC,WAAO,MAAC,SAAD;AAAW,MAAA,UAAU,EAAE,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;AACD;;;;;;;;;;;;;;;;;;AAiBA,SACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEH,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,4BACE;AAAS,IAAA,SAAS,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQF,IAAI,CAACM,KAAb,CADF,CADF,EAIE,MAAC,UAAD;AAAY,IAAA,KAAK,EAAEN,IAAI,CAACM,KAAxB;AAA+B,IAAA,IAAI,EAAEN,IAAI,CAACO,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,MAAC,QAAD;AAAU,IAAA,OAAO,EAAEP,IAAI,CAACQ,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF,CAFF,CADF,CADF;AAgBD,CAxCD;AAyCA;;;;;;;;;;;;;;;;;;;GAzCMT,I;UAEWR,S;;;KAFXQ,I;;AA0DN,eAAeA,IAAf;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FA","sourcesContent":["import { NextPage } from \"next\";\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Container from \"../../components/container\";\nimport PostBody from \"../../components/post-body\";\nimport Header from \"../../components/header\";\nimport PostHeader from \"../../components/post-header\";\nimport PreviousArticle from \"../../components/previous-article\";\nimport BackArticle from \"../../components/back-article\";\nimport Layout from \"../../components/layout\";\nimport { getPostBySlug, getAllPosts } from \"../../lib/api\";\nimport PostTitle from \"../../components/post-title\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../../lib/constants\";\nimport markdownToHtml from \"../../lib/markdownToHtml\";\nimport PostType from \"../../types/post\";\nimport useSWR from \"swr\";\nimport CMS from \"../../types/cms\";\n\ntype Props = {\n  post: PostType;\n  morePosts?: PostType[];\n  preview?: boolean;\n};\n\nconst Post: React.FC<Props> = ({ post, morePosts, preview }) => {\n  //const Post: NextPage<Props> = ({ post, morePosts, preview }) => {\n  const router = useRouter();\n\n  if (!router.isFallback && !post?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n  /*\n  let linkpostpre = -1;\n  let linkpostback = morePosts.length;\n  for (let i = 0; i < morePosts.length; i++) {\n    if (post?.slug === morePosts[i].slug) {\n      if (i !== 0) {\n        linkpostpre = i - 1;\n      }\n      linkpostback = i + 1;\n    }\n  }\n\n  {router.isFallback ? (\n          <PostTitle>Loading…</PostTitle>\n        ) : (\n        )}\n*/\n  return (\n    <Layout preview={preview}>\n      <Container>\n        <Header />\n        <>\n          <article className=\"mb-32\">\n            <Head>\n              <title>{post.title}</title>\n            </Head>\n            <PostHeader title={post.title} date={post.date} />\n            <PostBody content={post.content} />\n          </article>\n        </>\n      </Container>\n    </Layout>\n  );\n};\n/*\n              <div className=\"flex\">\n                {linkpostpre === -1 ? (\n                  <PreviousArticle\n                    post={morePosts[linkpostpre]}\n                    linknumber={linkpostpre}\n                  />\n                ) : (\n                  <PreviousArticle post={morePosts[linkpostpre]} />\n                )}\n                {linkpostback === morePosts.length ? (\n                  <BackArticle post={morePosts[linkpostpre]} linknumber={0} />\n                ) : (\n                  <BackArticle post={morePosts[linkpostback]} />\n                )}\n              </div>\n*/\nexport default Post;\n\ntype Params = {\n  params: {\n    id: string;\n  };\n};\n\n/*\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  const fetcher = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  }).then((res) => res.json());\n\n  // SWRを使用してのAPI呼び出し\n  const { data, error } = useSWR<CMS, {}>(cmsurl, fetcher);\n\n  if (error) return <div>error</div>;\n  if (!data) return <div>loading...</div>;\n\n  const articleList = data.contents.reverse();\n  const post = articleList[0];\n  const allPosts = articleList.slice(1);\n\n  const content = await markdownToHtml(post.blogtext || \"\");\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n*/\n/*\n  return {\n    props: {\n      post: params.post,\n      morePosts: params.morePosts,\n    },\n  };\n\n  const post = getPostBySlug(params.slug, [\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"content\",\n    \"ogImage\",\n    \"coverImage\",\n  ]);\n\n  const content = await markdownToHtml(post.content || \"\");\n\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"coverImage\",\n    \"excerpt\",\n  ]);\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n*/\n\nexport async function getStaticPaths() {\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  const res = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  });\n  const posts = await res.json();\n\n  const articleList = posts.contents.reverse();\n\n  const paths = articleList.map((article) => `/posts/${article.id.toString()}`);\n\n  return {\n    paths,\n    fallback: true,\n  };\n}\n\nexport async function getStaticProps({ params }: Params) {\n  const id = params.id;\n\n  const cmsurl = `https://myblog-nextjs.microcms.io/api/v1/blog/`;\n\n  let res = await fetch(`${cmsurl}${id}`, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  });\n  let posts = await res.json();\n  const article = posts;\n  const content = await markdownToHtml(posts.blogtext || \"\");\n\n  res = await fetch(`${cmsurl}${id}`, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  });\n  posts = await res.json();\n  const articleList = posts.contents;\n\n  return {\n    props: {\n      post: {\n        ...article,\n        content,\n      },\n      morePosts: articleList,\n    },\n  };\n}\n/*\n  const res = await fetch(\"/posts\");\n  const posts = await res.json();\n\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n\nconst posts = getAllPosts([\"slug\"]);\n\nreturn {\n  paths: articleList.map((articleList) => {\n    return {\n      params: {\n        slug: articleList.id,\n      },\n    };\n  }),\n  fallback: false,\n};\n*/\n"]},"metadata":{},"sourceType":"module"}