{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\workspace_nextjs\\\\myblog-bynextjs\\\\pages\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Container from \"../components/container\";\nimport MoreStories from \"../components/more-stories\";\nimport HeroPost from \"../components/hero-post\";\nimport Intro from \"../components/intro\";\nimport Layout from \"../components/layout\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../lib/constants\";\nimport useSWR from \"swr\";\n\nvar Index = function Index(_ref) {\n  _s();\n\n  var allPosts = _ref.allPosts;\n  var heroPost = allPosts[0];\n  var morePosts = allPosts.slice(1);\n  var cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\"; // CMSからのレスポンス結果の型定義\n\n  // API呼び出しの準備\n  var fetcher = function fetcher() {\n    return fetch(cmsurl, {\n      method: \"GET\",\n      headers: {\n        \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\"\n      }\n    }).then(function (res) {\n      return res.json();\n    });\n  }; // SWRを使用してのAPI呼び出し\n\n\n  var _useSWR = useSWR(cmsurl, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  var postslist = data === null || data === void 0 ? void 0 : data.contents.slice();\n  postslist = postslist.map(postslist).sort(function (post1, post2) {\n    return post1.date > post2.date ? -1 : 1;\n  });\n  /*\n  const fetcher = (\n    url : string\n  ) => fetch(\"https://api.github.com/users/facebook/repos\").then(res => res.json());\n  const {data, error} = useSWR(\"https://api.github.com/users/facebook/repos\", fetcher)\n  */\n\n  if (error) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }, \"error\");\n  if (!data) return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, \"loading...\");\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Next.js Blog Example with \", CMS_NAME)), __jsx(Container, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(Intro, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), heroPost && __jsx(HeroPost, {\n    title: heroPost.title,\n    coverImage: heroPost.coverImage,\n    date: heroPost.date,\n    author: heroPost.author,\n    slug: heroPost.slug,\n    excerpt: heroPost.excerpt,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), morePosts.length > 0 && __jsx(MoreStories, {\n    posts: morePosts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 36\n    }\n  })), data.contents[0].slug));\n};\n\n_s(Index, \"r2QYs02BSrn+Eu/1uMGZi8N+HnQ=\", false, function () {\n  return [useSWR];\n});\n\n_c = Index;\nexport var __N_SSG = true;\nexport default Index;\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["D:/workspace_nextjs/myblog-bynextjs/pages/index.tsx"],"names":["React","Container","MoreStories","HeroPost","Intro","Layout","Head","CMS_NAME","useSWR","Index","allPosts","heroPost","morePosts","slice","cmsurl","fetcher","fetch","method","headers","then","res","json","data","error","postslist","contents","map","sort","post1","post2","date","title","coverImage","author","slug","excerpt","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Container from \"../components/container\";\nimport MoreStories from \"../components/more-stories\";\nimport HeroPost from \"../components/hero-post\";\nimport Intro from \"../components/intro\";\nimport Layout from \"../components/layout\";\nimport { getAllPosts } from \"../lib/api\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../lib/constants\";\nimport Post from \"../types/post\";\nimport useSWR from \"swr\";\n\ntype Props = {\n  allPosts: Post[];\n};\n\nconst Index: React.FC<Props> = ({ allPosts }) => {\n  const heroPost = allPosts[0];\n  const morePosts = allPosts.slice(1);\n\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  // CMSからのレスポンス結果の型定義\n  type Result = {\n    contents: {\n      id: string;\n      createdAt: string;\n      updatedAt: string;\n      title: string;\n      excerpt: string;\n      date: string;\n      slug: string;\n      blogtext: string;\n    }[];\n    totalCount: string;\n    offset: string;\n    limit: string;\n  };\n\n  // API呼び出しの準備\n  const fetcher = () =>\n    fetch(cmsurl, {\n      method: \"GET\",\n      headers: {\n        \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n      },\n    }).then((res) => res.json());\n\n  // SWRを使用してのAPI呼び出し\n  const { data, error } = useSWR<Result, {}>(cmsurl, fetcher);\n\n  let postslist = data?.contents.slice();\n\n  postslist = postslist\n    .map(postslist)\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n\n  /*\n  const fetcher = (\n    url : string\n  ) => fetch(\"https://api.github.com/users/facebook/repos\").then(res => res.json());\n  const {data, error} = useSWR(\"https://api.github.com/users/facebook/repos\", fetcher)\n*/\n  if (error) return <div>error</div>;\n  if (!data) return <div>loading...</div>;\n\n  return (\n    <>\n      <Layout>\n        <Head>\n          <title>Next.js Blog Example with {CMS_NAME}</title>\n        </Head>\n        <Container>\n          <Intro />\n          {heroPost && (\n            <HeroPost\n              title={heroPost.title}\n              coverImage={heroPost.coverImage}\n              date={heroPost.date}\n              author={heroPost.author}\n              slug={heroPost.slug}\n              excerpt={heroPost.excerpt}\n            />\n          )}\n          {morePosts.length > 0 && <MoreStories posts={morePosts} />}\n        </Container>\n        {data.contents[0].slug}\n      </Layout>\n    </>\n  );\n};\n\nexport default Index;\n\nexport const getStaticProps = async () => {\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"coverImage\",\n    \"excerpt\",\n  ]);\n\n  return {\n    props: { allPosts },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}