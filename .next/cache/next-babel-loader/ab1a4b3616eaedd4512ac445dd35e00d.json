{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\workspace_nextjs\\\\myblog-bynextjs\\\\pages\\\\posts\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useRouter } from \"next/router\";\n\nvar Post = function Post(_ref) {\n  _s();\n\n  var post = _ref.post,\n      morePosts = _ref.morePosts,\n      preview = _ref.preview;\n  var router = useRouter();\n\n  if (!post) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }\n    }, \"error\");\n  }\n\n  if (post) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 12\n      }\n    }, \"data\");\n  }\n  /*\n  if (!router.isFallback && !post?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n   let linkpostpre = -1;\n  let linkpostback = morePosts.length;\n  for (let i = 0; i < morePosts.length; i++) {\n    if (post?.slug === morePosts[i].slug) {\n      if (i !== 0) {\n        linkpostpre = i - 1;\n      }\n      linkpostback = i + 1;\n    }\n  }\n   return (\n    <Layout preview={preview}>\n      <Container>\n        <Header />\n        {router.isFallback ? (\n          <PostTitle>Loading…</PostTitle>\n        ) : (\n          <>\n            <article className=\"mb-32\">\n              <Head>\n                <title>\n                  {post.title} | Next.js Blog Example with {CMS_NAME}\n                </title>\n              </Head>\n              <PostHeader title={post.title} date={post.date} />\n              <PostBody content={post.blogtext} />\n              <div className=\"flex\">\n                {linkpostpre === -1 ? (\n                  <PreviousArticle\n                    post={morePosts[linkpostpre]}\n                    linknumber={linkpostpre}\n                  />\n                ) : (\n                  <PreviousArticle post={morePosts[linkpostpre]} />\n                )}\n                {linkpostback === morePosts.length ? (\n                  <BackArticle post={morePosts[linkpostpre]} linknumber={0} />\n                ) : (\n                  <BackArticle post={morePosts[linkpostback]} />\n                )}\n              </div>\n            </article>\n          </>\n        )}\n      </Container>\n    </Layout>\n  );\n  */\n\n};\n\n_s(Post, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Post;\nexport var __N_SSG = true;\nexport default Post;\n/*\n  const res = await fetch(\"/posts\");\n  const posts = await res.json();\n\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n\nconst posts = getAllPosts([\"slug\"]);\n\nreturn {\n  paths: articleList.map((articleList) => {\n    return {\n      params: {\n        slug: articleList.id,\n      },\n    };\n  }),\n  fallback: false,\n};\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["D:/workspace_nextjs/myblog-bynextjs/pages/posts/[id].tsx"],"names":["React","useRouter","Post","post","morePosts","preview","router"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAwBA,IAAMC,IAAqB,GAAG,SAAxBA,IAAwB,OAAkC;AAAA;;AAAA,MAA/BC,IAA+B,QAA/BA,IAA+B;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC9D,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AAEA,MAAI,CAACE,IAAL,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AACD,MAAIA,IAAJ,EAAU;AACR,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDD,CA/DD;;GAAMD,I;UACWD,S;;;KADXC,I;;AAiEN,eAAeA,IAAf;AA2HA","sourcesContent":["import React from \"react\";\nimport { useRouter } from \"next/router\";\nimport ErrorPage from \"next/error\";\nimport Container from \"../../components/container\";\nimport PostBody from \"../../components/post-body\";\nimport Header from \"../../components/header\";\nimport PostHeader from \"../../components/post-header\";\nimport PreviousArticle from \"../../components/previous-article\";\nimport BackArticle from \"../../components/back-article\";\nimport Layout from \"../../components/layout\";\nimport { getPostBySlug, getAllPosts } from \"../../lib/api\";\nimport PostTitle from \"../../components/post-title\";\nimport Head from \"next/head\";\nimport { CMS_NAME } from \"../../lib/constants\";\nimport markdownToHtml from \"../../lib/markdownToHtml\";\nimport PostType from \"../../types/post\";\nimport useSWR from \"swr\";\nimport CMS from \"../../types/cms\";\n\ntype Props = {\n  post: PostType;\n  morePosts: PostType[];\n  preview?: boolean;\n};\n\nconst Post: React.FC<Props> = ({ post, morePosts, preview }) => {\n  const router = useRouter();\n\n  if (!post) {\n    return <div>error</div>;\n  }\n  if (post) {\n    return <div>data</div>;\n  }\n  /*\n  if (!router.isFallback && !post?.slug) {\n    return <ErrorPage statusCode={404} />;\n  }\n\n  let linkpostpre = -1;\n  let linkpostback = morePosts.length;\n  for (let i = 0; i < morePosts.length; i++) {\n    if (post?.slug === morePosts[i].slug) {\n      if (i !== 0) {\n        linkpostpre = i - 1;\n      }\n      linkpostback = i + 1;\n    }\n  }\n\n  return (\n    <Layout preview={preview}>\n      <Container>\n        <Header />\n        {router.isFallback ? (\n          <PostTitle>Loading…</PostTitle>\n        ) : (\n          <>\n            <article className=\"mb-32\">\n              <Head>\n                <title>\n                  {post.title} | Next.js Blog Example with {CMS_NAME}\n                </title>\n              </Head>\n              <PostHeader title={post.title} date={post.date} />\n              <PostBody content={post.blogtext} />\n              <div className=\"flex\">\n                {linkpostpre === -1 ? (\n                  <PreviousArticle\n                    post={morePosts[linkpostpre]}\n                    linknumber={linkpostpre}\n                  />\n                ) : (\n                  <PreviousArticle post={morePosts[linkpostpre]} />\n                )}\n                {linkpostback === morePosts.length ? (\n                  <BackArticle post={morePosts[linkpostpre]} linknumber={0} />\n                ) : (\n                  <BackArticle post={morePosts[linkpostback]} />\n                )}\n              </div>\n            </article>\n          </>\n        )}\n      </Container>\n    </Layout>\n  );\n*/\n};\n\nexport default Post;\n\ntype Params = {\n  params: {\n    id: string;\n  };\n};\n\nexport async function getStaticProps({ params }: Params) {\n  const res = await fetch(\"http://.../posts/${params.id}\");\n  const posts = await res.json();\n\n  return {\n    props: {\n      posts,\n    },\n  };\n  /*\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  const fetcher = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  }).then((res) => res.json());\n\n  // SWRを使用してのAPI呼び出し\n  const { data, error } = useSWR<CMS, {}>(cmsurl, fetcher);\n\n  if (error) return <div>error</div>;\n  if (!data) return <div>loading...</div>;\n\n  const articleList = data.contents.reverse();\n  const post = articleList[0];\n  const allPosts = articleList.slice(1);\n\n  const content = await markdownToHtml(post.blogtext || \"\");\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n*/\n  /*\n  return {\n    props: {\n      post: params.post,\n      morePosts: params.morePosts,\n    },\n  };\n\n  const post = getPostBySlug(params.slug, [\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"content\",\n    \"ogImage\",\n    \"coverImage\",\n  ]);\n\n  const content = await markdownToHtml(post.content || \"\");\n\n  const allPosts = getAllPosts([\n    \"title\",\n    \"date\",\n    \"slug\",\n    \"author\",\n    \"coverImage\",\n    \"excerpt\",\n  ]);\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n*/\n}\n\nexport async function getStaticPaths() {\n  const cmsurl = \"https://myblog-nextjs.microcms.io/api/v1/blog\";\n\n  const fetcher = await fetch(cmsurl, {\n    method: \"GET\",\n    headers: {\n      \"X-API-KEY\": \"c2bf30d3-1da2-45a3-8327-b992b9006af3\",\n    },\n  }).then((res) => res.json());\n\n  // SWRを使用してのAPI呼び出し\n  const { data, error } = useSWR<CMS, {}>(cmsurl, fetcher);\n\n  if (error) return <div>error</div>;\n  if (!data) return <div>loading...</div>;\n\n  const articleList = data.contents.reverse();\n  const post = articleList[0];\n  const allPosts = articleList.slice(1);\n\n  const content = await markdownToHtml(post.blogtext || \"\");\n\n  return {\n    props: {\n      post: {\n        ...post,\n        content,\n      },\n      morePosts: allPosts,\n    },\n  };\n}\n\n/*\n  const res = await fetch(\"/posts\");\n  const posts = await res.json();\n\n  const paths = posts.map((post) => ({\n    params: { id: post.id },\n  }));\n\n  return {\n    paths,\n    fallback: false,\n  };\n\nconst posts = getAllPosts([\"slug\"]);\n\nreturn {\n  paths: articleList.map((articleList) => {\n    return {\n      params: {\n        slug: articleList.id,\n      },\n    };\n  }),\n  fallback: false,\n};\n*/\n"]},"metadata":{},"sourceType":"module"}